version: 0.2

env:
    variables:
        CODE_SRC_DIR: "."

phases:
    install:
        runtime-versions:
            python: 3.11
        commands:
            - stat $${CODEBUILD_SRC_DIR_SourceAnsibleOutput}/init.sh && bash $${CODEBUILD_SRC_DIR_SourceAnsibleOutput}/init.sh $${CODEBUILD_SRC_DIR_SourceAnsibleOutput} || echo "No init.sh script found"
            - stat /bin/terraform || curl -s -qL -o terraform.zip https://releases.hashicorp.com/terraform/${terraform_version}/terraform_${terraform_version}_linux_amd64.zip
            - stat /bin/terraform || unzip -o terraform.zip
            - stat /bin/terraform || mv terraform /bin && rm terraform.zip || echo "files not present"
    build:
        commands:
            - echo "Configuring AWS credentials"
            - echo "Fetching AWS credentials from ECS metadata service"
            - echo "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=$${AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}"
            - curl -qL -o aws_credentials.json http://169.254.170.2/$${AWS_CONTAINER_CREDENTIALS_RELATIVE_URI} > aws_credentials.json
            - aws configure set region $AWS_REGION
            - aws configure set aws_access_key_id `jq -r '.AccessKeyId' aws_credentials.json`
            - export AWS_ACCESS_KEY_ID=`jq -r '.AccessKeyId' aws_credentials.json`
            - aws configure set aws_secret_access_key `jq -r '.SecretAccessKey' aws_credentials.json`
            - export AWS_SECRET_ACCESS_KEY=`jq -r '.SecretAccessKey' aws_credentials.json`
            - aws configure set aws_session_token `jq -r '.Token' aws_credentials.json`
            - export AWS_SESSION_TOKEN=`jq -r '.Token' aws_credentials.json`
            - echo "Applying Terraform configuration template"
            - cd $${CODEBUILD_SRC_DIR_SourceGossOutput}
            
            - /bin/terraform init -backend-config="key=${state.key}" -backend-config="region=${state.region}" -backend-config="bucket=${state.bucket}" -backend-config="dynamodb_table=${state.dynamodb_table}" -backend-config="encrypt=true"
            - /bin/terraform apply -var project_name=${project_name} -var goss_directory=$${CODEBUILD_SRC_DIR_SourceGossOutput} -auto-approve

    post_build:
        commands:
            - cd $${CODEBUILD_SRC_DIR_SourceGossOutput}
            - echo "the true or false value of the below lines is set by var.troubleshoot and is passed in from the terraform-aws-image-pipeline module"
            - ${troubleshoot} || /bin/terraform destroy -var project_name=${project_name} -var goss_directory=$${CODEBUILD_SRC_DIR_SourceGossOutput}  -auto-approve
            - ${troubleshoot} || test -f tf_ami_id.txt && aws ec2 deregister-image --image-id `cat tf_ami_id.txt` --region $AWS_REGION || echo "Tests passed, no AMI to deregister"
artifacts:
    files:
        - '**/*'


cache:
  paths:
    - $${CODEBUILD_SRC_DIR_SourceGossOutput}/.terraform
    - /bin/terraform
