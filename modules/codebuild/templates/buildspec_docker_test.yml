version: 0.2

env:
    variables:
        CODE_SRC_DIR: "."

phases:
    install:
        runtime-versions:
            python: 3.11
        commands:
            - stat $${CODEBUILD_SRC_DIR_SourceAnsibleOutput}/init.sh && bash $${CODEBUILD_SRC_DIR_SourceAnsibleOutput}/init.sh $${CODEBUILD_SRC_DIR_SourceAnsibleOutput} || echo "No init.sh script found"
    build:
        commands:
            - echo "Configuring AWS credentials"
            - echo "Fetching AWS credentials from ECS metadata service"
            - echo "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=$${AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}"
            - curl -qL -o aws_credentials.json http://169.254.170.2/$${AWS_CONTAINER_CREDENTIALS_RELATIVE_URI} > aws_credentials.json
            - aws configure set region $AWS_REGION
            - aws configure set aws_access_key_id `jq -r '.AccessKeyId' aws_credentials.json`
            - export AWS_ACCESS_KEY_ID=`jq -r '.AccessKeyId' aws_credentials.json`
            - aws configure set aws_secret_access_key `jq -r '.SecretAccessKey' aws_credentials.json`
            - export AWS_SECRET_ACCESS_KEY=`jq -r '.SecretAccessKey' aws_credentials.json`
            - aws configure set aws_session_token `jq -r '.Token' aws_credentials.json`
            - export AWS_SESSION_TOKEN=`jq -r '.Token' aws_credentials.json`

    post_build:
        commands:
            - export GOSS_FILE=$${CODEBUILD_SRC_DIR_SourceGossOutput}/goss-files/$(aws ssm get-parameter --name /image-pipeline/${project_name}/goss_profile --region $AWS_REGION --query 'Parameter.Value' --output text).yaml
            - export GOSS_BINARY=$${CODEBUILD_SRC_DIR_SourceGossOutput}/dependencies/$(aws ssm get-parameter --name /image-pipeline/${project_name}/goss_binary --region $AWS_REGION --query 'Parameter.Value' --output text)
            - export REPO=$(aws ssm get-parameter --name /image-pipeline/${project_name}/dest_docker_repo --region $AWS_REGION --query 'Parameter.Value' --output text)
            - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
            - export DOCKER_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)
            - export ECR_SERVER=$${AWS_ACCOUNT_ID}.dkr.ecr.$${AWS_REGION}.amazonaws.com
            - docker login -u AWS -p $${DOCKER_PASSWORD} $${ECR_SERVER}
            - export IMAGE_TAG=$(aws ssm get-parameter --name /image-pipeline/${project_name}/dest_tag --region $AWS_REGION --query 'Parameter.Value' --output text)
            - chmod +x $${GOSS_BINARY}
            - echo "aws ecr batch-delete-image --repository-name $${REPO}/${project_name} --image-ids imageTag=$${IMAGE_TAG}" > delete_image.sh && chmod +x delete_image.sh
            - (docker run -v $${GOSS_FILE}:/opt/goss/goss.yaml -v $${GOSS_BINARY}:/opt/goss/goss $${ECR_SERVER}/$${REPO}/${project_name}:$${IMAGE_TAG} /opt/goss/goss -g /opt/goss/goss.yaml validate) || (echo "Goss test failed" && ./delete_image.sh)
artifacts:
    files:
        - '**/*'


cache:
  paths:
    - $${CODEBUILD_SRC_DIR_SourceGossOutput}/.terraform
    - /bin/terraform
